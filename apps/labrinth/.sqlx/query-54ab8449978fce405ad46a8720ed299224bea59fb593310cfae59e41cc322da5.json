{
  "db_name": "PostgreSQL",
  "query": "\n            SELECT\n                delphi_report_issues.id AS \"id\", report_id,\n                issue_type,\n                delphi_report_issues.status AS \"status: DelphiReportIssueStatus\",\n\n                file_id, delphi_version, artifact_url, created, severity AS \"severity: DelphiReportSeverity\",\n                json_array(SELECT to_jsonb(delphi_report_issue_java_classes)\n                    FROM delphi_report_issue_java_classes\n                    WHERE issue_id = delphi_report_issues.id\n                ) AS \"classes: sqlx::types::Json<Vec<DBDelphiReportIssueJavaClass>>\",\n                versions.mod_id AS \"project_id?\", mods.published AS \"project_published?\"\n            FROM delphi_report_issues\n            INNER JOIN delphi_reports ON delphi_reports.id = report_id\n            LEFT OUTER JOIN files ON files.id = file_id\n            LEFT OUTER JOIN versions ON versions.id = files.version_id\n            LEFT OUTER JOIN mods ON mods.id = versions.mod_id\n            WHERE\n                (issue_type = $1 OR $1 IS NULL)\n                AND (delphi_report_issues.status = $2 OR $2 IS NULL)\n            ORDER BY\n                CASE WHEN $3 = 'created_asc' THEN delphi_reports.created ELSE TO_TIMESTAMP(0) END ASC,\n                CASE WHEN $3 = 'created_desc' THEN delphi_reports.created ELSE TO_TIMESTAMP(0) END DESC,\n                CASE WHEN $3 = 'pending_status_first' THEN delphi_report_issues.status ELSE 'pending'::delphi_report_issue_status END ASC,\n                CASE WHEN $3 = 'severity_asc' THEN delphi_reports.severity ELSE 'low'::delphi_report_severity END ASC,\n                CASE WHEN $3 = 'severity_desc' THEN delphi_reports.severity ELSE 'low'::delphi_report_severity END DESC\n            OFFSET $5\n            LIMIT $4\n            ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "id",
        "type_info": "Int8"
      },
      {
        "ordinal": 1,
        "name": "report_id",
        "type_info": "Int8"
      },
      {
        "ordinal": 2,
        "name": "issue_type",
        "type_info": "Text"
      },
      {
        "ordinal": 3,
        "name": "status: DelphiReportIssueStatus",
        "type_info": {
          "Custom": {
            "name": "delphi_report_issue_status",
            "kind": {
              "Enum": [
                "pending",
                "approved",
                "rejected"
              ]
            }
          }
        }
      },
      {
        "ordinal": 4,
        "name": "file_id",
        "type_info": "Int8"
      },
      {
        "ordinal": 5,
        "name": "delphi_version",
        "type_info": "Int4"
      },
      {
        "ordinal": 6,
        "name": "artifact_url",
        "type_info": "Varchar"
      },
      {
        "ordinal": 7,
        "name": "created",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 8,
        "name": "severity: DelphiReportSeverity",
        "type_info": {
          "Custom": {
            "name": "delphi_report_severity",
            "kind": {
              "Enum": [
                "low",
                "medium",
                "high",
                "severe"
              ]
            }
          }
        }
      },
      {
        "ordinal": 9,
        "name": "classes: sqlx::types::Json<Vec<DBDelphiReportIssueJavaClass>>",
        "type_info": "Jsonb"
      },
      {
        "ordinal": 10,
        "name": "project_id?",
        "type_info": "Int8"
      },
      {
        "ordinal": 11,
        "name": "project_published?",
        "type_info": "Timestamptz"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        {
          "Custom": {
            "name": "delphi_report_issue_status",
            "kind": {
              "Enum": [
                "pending",
                "approved",
                "rejected"
              ]
            }
          }
        },
        "Text",
        "Int8",
        "Int8"
      ]
    },
    "nullable": [
      false,
      false,
      false,
      false,
      true,
      false,
      false,
      false,
      false,
      null,
      true,
      true
    ]
  },
  "hash": "54ab8449978fce405ad46a8720ed299224bea59fb593310cfae59e41cc322da5"
}
